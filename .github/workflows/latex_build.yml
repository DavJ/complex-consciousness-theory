name: Build all LaTeX PDFs

on:
  push:
  pull_request:

jobs:
  discover:
    name: Discover LaTeX roots
    runs-on: ubuntu-latest
    outputs:
      roots: ${{ steps.discover.outputs.roots }}
    steps:
      - uses: actions/checkout@v4

      - id: discover
        run: |
          set -euo pipefail

          # Najdi všechny .tex soubory, které obsahují \documentclass
          # (vynecháme běžné build/vendor adresáře)
          mapfile -t roots < <(git ls-files '*.tex' \
            | grep -Ev '^(vendor|node_modules|build|out|dist)/' \
            | xargs -r grep -l -E '\\documentclass')

          if [ ${#roots[@]} -eq 0 ]; then
            echo "Nebyly nalezeny žádné LaTeX root soubory."
            echo 'roots=[]' >> "$GITHUB_OUTPUT"
          else
            printf '%s\n' "${roots[@]}" \
              | jq -R -s -c 'split("\n")[:-1]' \
              | sed 's/^/roots=/' >> "$GITHUB_OUTPUT"
            echo "Nalezeno ${#roots[@]} root soubor(ů)."
          fi

  compile:
    name: compile (${{ matrix.root }})
    needs: discover
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        root: ${{ fromJson(needs.discover.outputs.roots) }}
    steps:
      - uses: actions/checkout@v4

      - name: Detect engine + paths
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          root="${{ matrix.root }}"
          dir="$(dirname "$root")"
          pdf="${root%.tex}.pdf"

          # Heuristika pro volbu engine:
          # 1) magic comment %!TEX program = xelatex|lualatex
          # 2) balíčky fontspec/polyglossia/unicode-math => xelatex
          # 3) luacode/luaotfload => lualatex
          engine="pdflatex"
          grep -Eq '^[[:space:]]*%!?TEX.*(xelatex|lualatex)' "$root" && \
            engine="$(grep -Eo '^[[:space:]]*%!?TEX.*(xelatex|lualatex)' "$root" | grep -Eo '(xelatex|lualatex)' | head -n1)"
          grep -Eq '\\usepackage\{(fontspec|polyglossia|unicode-math)\}' "$root" && engine="xelatex"
          grep -Eq '\\usepackage\{(luacode|luaotfload)\}' "$root" && engine="lualatex"

          echo "dir=$dir"     >> "$GITHUB_OUTPUT"
          echo "pdf=$pdf"     >> "$GITHUB_OUTPUT"
          echo "engine=$engine" >> "$GITHUB_OUTPUT"

      - name: LaTeX build ${{ matrix.root }}
        uses: xu-cheng/latex-action@v4
        with:
          root_file: ${{ matrix.root }}
          work_in_root_file_dir: true
          continue_on_error: true
          # Nepředáváme 'compiler', aby akce použila latexmk správně.
          latexmk_use_xelatex: ${{ steps.detect.outputs.engine == 'xelatex' }}
          latexmk_use_lualatex: ${{ steps.detect.outputs.engine == 'lualatex' }}
          # latexmk_shell_escape: true   # odkomentuj, pokud některé dokumenty vyžadují \write18
          pre_compile: |
            set -euo pipefail
            # Spolehlivé zrcadlo (redirect na blízké) a nepadat kvůli jedné instalaci
            tlmgr option repository http://mirror.ctan.org/systems/texlive/tlnet
            tlmgr update --self || true

            # Běžně chybějící (a námi odladěné) balíčky; 'graphics' (ne 'graphicx'!)
            pkgs="
              amsfonts amsmath mathtools siunitx physics
              babel csquotes etoolbox geometry hyperref graphics
              pgf pgfplots tikz-cd standalone float caption subcaption
              listings fancyvrb soul wrapfig mhchem ifmtarg kvoptions kvsetkeys pdftexcmds
              biblatex biber
              fontspec unicode-math polyglossia
            "
            for p in $pkgs; do
              tlmgr info --only-installed "$p" >/dev/null 2>&1 || tlmgr install "$p" || true
            done
          post_compile: |
            echo "Kompilace dokončena pro ${{ matrix.root }}"

      - name: Upload PDF
        if: always()
        uses: actions/upload-artifact@v4
        with:
          # Bezpečný název artifactu (nahrazení / za __)
          name: pdf-${{ replace(matrix.root, '/', '__') }}
          path: ${{ steps.detect.outputs.pdf }}
          if-no-files-found: ignore

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ replace(matrix.root, '/', '__') }}
          path: |
            ${{ steps.detect.outputs.dir }}/*.log
            ${{ steps.detect.outputs.dir }}/*.blg
            ${{ steps.detect.outputs.dir }}/*.fls
          if-no-files-found: ignore

